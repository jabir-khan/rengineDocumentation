{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome reNgine reNgine is an automated reconnaissance framework meant information gathering during penetration testing of web applications. reNgine has pipeline of highly configurable reconnaissance steps. With the integration of various open source information gathering tools, reNgine , uses all or some of them depending upon the configuration and gathers the results at a single place. What's new in reNgine v0.5? After months of work, reNgine is finally ready for v0.5 release. v0.5 brings some of the exciting features that you all have been asking for! ++Nuclei Integration : v0.5 is primarily focused on vulnerability scanner using Nuclei. This was a long pending due and we've finally integrated it. ++Powerful search queries across endpoints, subdomains and vulnerability scan results : reNgine reconnaissance data can now be queried using operators like <,>,&,| and !, namely greater than, less than, and, or, and not. This is extremely useful in querying the recon data. More details can be found at Instructions to perform Queries on Recon data ++Out of scope options : Many of you have been asking for out of scope option. Thanks to Valerio Brussani for his pull request which made it possible for out of scope options. Please check the documentation on how to define out of scope options. ++Official Documentation(WIP) : We often get asked on how to use reNgine. For long, we had no official documentation. Finally, I've worked on it and we have the official documentation at rengine.wiki The documentation is divided into two parts, for Developers and for Penetration Testers. For developers, it's a work in progress. I will keep you all updated throughout the process. ++Redefined Dashboard : We've also made some changes in the Dashboard. The additions include vulnerability scan results, most vulnerable targets , most common vulnerabilities . ++Global Search : This feature has been one of the most requested features for reNgine. Now you can search all the subdomains, endpoints, and vulnerabilities. ++OneForAll Support : reNgine now supports OneForAll for subdomain discovery, it is currently in beta. I am working on how to integrate OneForAll APIKeys and Configuration files. ++Configuration Support for subfinder : You will now have ability to add configurations for subfinder as well. ++Timeout option for aquatone : We added timeout options in yaml configuration as a lot of screenshots were missing. You can now define timeout for http, scan and screenshots for timeout in milliseconds. ++Design Changes A lot of design changes has happened in reNgine. Some of which are: Endpoints Results and Vulnerability Scan Results are now displayed as a separate page, this is to separate the results and decrease the page load time. Checkbox next to Subdomains and Vulnerability report list to change the status, this allows you to mark all subdomains and vulnerabilities that you've already completed working on. Sometimes due to timeout, aquatone was skipping the screenshots and due to that, navigations between screenshots was little annoying. We have fixed it as well. Ability to delete multiple targets and initiate multiple scans. --Subdomain Takeover : As we decided to use Nuclei for Vulnerability Scanner, and also, since Subjack wasn't giving enough results, I decided to remove Subjack. The subdomain Takeover will now be part of Nuclei Vulnerability Scanner. reNgine current capabilities reNgine capabilities Subdomain Discovery : Discovers all the subdomains using tools like sublist3r, subfinder, amass, assetfinder, etc. Port Scan : Use to identify the open ports on the subdomains that have been discovered. Currently reNgine uses naabu to check for open ports. We have plans to use masscan in the future. Directory and File Search : Uses dirsearch to discover the directories and files. Fetch all Endpoints : Fetches all the urls for each subdomains from various sources like Open Threat Exchange, Wayback machine, common crawl etc. reNgine uses gau , hakrawler to fetch the endpoints. Vulnerability Scan (Beta) : reNgine uses nuclei to perform the Vulnerability Scans on the targets. This documentation is designed for both Developers and Penetration Testers. I am a Developer I am a Pentester Introduction Prerequisites Installation Instructions Usage Defining Scan Engines Adding and Importing Targets reNgine Configurations Wordlist Notification Initiating Scan Scan Status Scheduling Scan Vulnerability Scan (Beta) Performing advanced lookup on recon results YAML configuration for Scan Engine This documentation is currently under construction. Help me build this documentation . reNgine uses these tools and utilities, and would like to thank the developers for such awesome tools. reNgine would not have been possible without the usage of these tools. Thank you! Project Discovery nuclei httpx naabu subfinder OWASP amass Michael Henriksen aquatone Ahmed Aboul-Ela Sublist3r Tom Hudson assetfinder Corben Leo gau Luke Stephens hakrawler Mauro Soria dirsearch","title":"Home"},{"location":"#welcome","text":"","title":"Welcome"},{"location":"#rengine","text":"reNgine is an automated reconnaissance framework meant information gathering during penetration testing of web applications. reNgine has pipeline of highly configurable reconnaissance steps. With the integration of various open source information gathering tools, reNgine , uses all or some of them depending upon the configuration and gathers the results at a single place. What's new in reNgine v0.5? After months of work, reNgine is finally ready for v0.5 release. v0.5 brings some of the exciting features that you all have been asking for! ++Nuclei Integration : v0.5 is primarily focused on vulnerability scanner using Nuclei. This was a long pending due and we've finally integrated it. ++Powerful search queries across endpoints, subdomains and vulnerability scan results : reNgine reconnaissance data can now be queried using operators like <,>,&,| and !, namely greater than, less than, and, or, and not. This is extremely useful in querying the recon data. More details can be found at Instructions to perform Queries on Recon data ++Out of scope options : Many of you have been asking for out of scope option. Thanks to Valerio Brussani for his pull request which made it possible for out of scope options. Please check the documentation on how to define out of scope options. ++Official Documentation(WIP) : We often get asked on how to use reNgine. For long, we had no official documentation. Finally, I've worked on it and we have the official documentation at rengine.wiki The documentation is divided into two parts, for Developers and for Penetration Testers. For developers, it's a work in progress. I will keep you all updated throughout the process. ++Redefined Dashboard : We've also made some changes in the Dashboard. The additions include vulnerability scan results, most vulnerable targets , most common vulnerabilities . ++Global Search : This feature has been one of the most requested features for reNgine. Now you can search all the subdomains, endpoints, and vulnerabilities. ++OneForAll Support : reNgine now supports OneForAll for subdomain discovery, it is currently in beta. I am working on how to integrate OneForAll APIKeys and Configuration files. ++Configuration Support for subfinder : You will now have ability to add configurations for subfinder as well. ++Timeout option for aquatone : We added timeout options in yaml configuration as a lot of screenshots were missing. You can now define timeout for http, scan and screenshots for timeout in milliseconds. ++Design Changes A lot of design changes has happened in reNgine. Some of which are: Endpoints Results and Vulnerability Scan Results are now displayed as a separate page, this is to separate the results and decrease the page load time. Checkbox next to Subdomains and Vulnerability report list to change the status, this allows you to mark all subdomains and vulnerabilities that you've already completed working on. Sometimes due to timeout, aquatone was skipping the screenshots and due to that, navigations between screenshots was little annoying. We have fixed it as well. Ability to delete multiple targets and initiate multiple scans. --Subdomain Takeover : As we decided to use Nuclei for Vulnerability Scanner, and also, since Subjack wasn't giving enough results, I decided to remove Subjack. The subdomain Takeover will now be part of Nuclei Vulnerability Scanner.","title":"reNgine"},{"location":"#rengine-current-capabilities","text":"reNgine capabilities Subdomain Discovery : Discovers all the subdomains using tools like sublist3r, subfinder, amass, assetfinder, etc. Port Scan : Use to identify the open ports on the subdomains that have been discovered. Currently reNgine uses naabu to check for open ports. We have plans to use masscan in the future. Directory and File Search : Uses dirsearch to discover the directories and files. Fetch all Endpoints : Fetches all the urls for each subdomains from various sources like Open Threat Exchange, Wayback machine, common crawl etc. reNgine uses gau , hakrawler to fetch the endpoints. Vulnerability Scan (Beta) : reNgine uses nuclei to perform the Vulnerability Scans on the targets. This documentation is designed for both Developers and Penetration Testers. I am a Developer I am a Pentester Introduction Prerequisites Installation Instructions Usage Defining Scan Engines Adding and Importing Targets reNgine Configurations Wordlist Notification Initiating Scan Scan Status Scheduling Scan Vulnerability Scan (Beta) Performing advanced lookup on recon results YAML configuration for Scan Engine This documentation is currently under construction. Help me build this documentation . reNgine uses these tools and utilities, and would like to thank the developers for such awesome tools. reNgine would not have been possible without the usage of these tools. Thank you! Project Discovery nuclei httpx naabu subfinder OWASP amass Michael Henriksen aquatone Ahmed Aboul-Ela Sublist3r Tom Hudson assetfinder Corben Leo gau Luke Stephens hakrawler Mauro Soria dirsearch","title":"reNgine current capabilities"},{"location":"developer/","text":"For Developers Coming Soon","title":"Welcome"},{"location":"developer/#for-developers","text":"Coming Soon","title":"For Developers"},{"location":"pentester/install/","text":"For Penetration Testers This documentation is intended for Penetration Testers or anybody who will use reNgine for information gathering purpose. This document aims to provide detailed instructions on setting up and running the reNgine . For detailed instruction on \"How to use reNgine\" after setup, it has been provided in Usage Section . This document is divided into 2 parts: It is highly recommended that you follow each steps to avoid encountering any errors/issues during the setup. Prerequisites reNgine Installation Prerequisites reNgine uses several scripts and tools, they rely on different other tools to be installed like Go, python, etc and to avoid any dependency issues, we decided to use Docker. Using Docker will not only ease the dependency issues, but will also ease the installation steps. As a penetration tester, you need not focus much on solving the dependencies, installing required tools, etc. With few installation steps, you should be good to run reNgine . reNgine requires these tools to be installed before you begin any installation steps: Docker Docker provides very good documentation on how to install docker based on your Operating System. You can follow the documentation here. Docker installation on Ubuntu/Linux Distributions Warning The installation steps have been directly taken from Docker Guide with no modification. Update the apt package index and install the below packages sudo apt-get update sudo apt-get install \\ apt-transport-https \\ ca-certificates \\ curl \\ gnupg-agent \\ software-properties-common Add Docker official GPG key curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - Use the following commands to setup the stable repository sudo add-apt-repository \\ \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs) \\ stable\" Finally install Docker Engine sudo apt-get update && sudo apt-get install docker-ce docker-ce-cli containerd.io Test the Docker by running docker command on your console/terminal. Docker installation on Windows Docker requires Docker Desktop to be installed on your Windows OS. Installing Docker Desktop is as easy as double clicking the InstallDocker.msi installer, downloaded from here . Docker installation on Mac OS Docker requires Docker Desktop to be installed on your Mac OS. Follow the instruction from Docker hub to install Docker on Mac OS . Docker installation on Windows WSL Nick Janetakis has a well written blog and a Video guide on how to install Docker on Windows Subsystem Linux . Please follow the video/blog guide on how to install Docker on WSL. Docker Compose If you're running Docker Desktop you can skip installing docker-compose as docker-compose comes along with Docker Desktop. This applies for both Windows and Mac OS users. If you're using Linux distributions or WSL, you will still need to install docker-compose and the installation steps are similar. Installing docker-compose on Linux systems Download the latest stable version of docker-compose sudo curl -L \"https://github.com/docker/compose/releases/download/1.27.4/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose Apply executable permission sudo chmod +x /usr/local/bin/docker-compose Create a symbolic link sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose Verify your installation by running docker-compose --version Info If curl is not working for some reason, there are alternate installation steps as well. You can use pip or install as a container. Follow the alternate installation steps . make make installation on Linux Distributions Install the latest version of make using sudo apt install make Although it is optional, build-essential package can also be installed which contains make utility. sudo apt install build-essential reNgine Installation Installing reNgine on your favourite VPS or on your local machine is pretty straight forward process. Installation instruction for VPS and local machine is similar and same steps can be followed. If you have met all the above Prerequisites , you can begin installing reNgine . Let's begin by cloning the reNgine . git clone https://github.com/yogeshojha/rengine cd rengine There are currently two different ways of installing reNgine . Using make Manually using docker-compose Using make is by far the easiest way to setup reNgine without encountering any errors. Using docker-compose is a tidious process and is only intended for development purpose. Unless otherwise you're developing reNgine , it is recommended that you use make to install reNgine . Installation steps using docker-compose can be found in Developer's section. dotenv file Before we begin installing reNgine, it is necessary to make changes to the dotenv file. You can edit the file using your favourite editor nano .env or vim .env The sample .env file can be found here . # # General # COMPOSE_PROJECT_NAME=rengine # # SSL specific configuration # AUTHORITY_NAME=reNgine AUTHORITY_PASSWORD=mySecurePassword COMPANY=reNgine DOMAIN_NAME=recon.example.com COUNTRY_CODE=IN STATE=Karnataka CITY=Bangalore Generating SSL Certificates reNgine runs on https unless otherwise used for development purpose. So using https is recommended. To generate the certificates you can use make certs Please note, while running any make command, you must be inside the rengine/ directory. Build reNgine To build the reNgine, use the following command make build The build process is a lengthy process and may take some time. Thanks to Baptiste MOINE for sending the PR that made build process so much simpler. Run reNgine Once the build process is successful, we're good to run reNgine. This can be done using below command make up reNgine can now be accessed from https://127.0.0.1 or if you're on the VPS https://your_vps_ip_address Registering an account The recent upgrade bring authentication feature on reNgine. You will need to create a username and password in order to login to the reNgine. To register reNgine, you will need to run the following command make username You will now be prompted with some personal details(optional), username and password. We highly recommend that you set a strong password for reNgine. You may now login to the reNgine web portal using the username and password that you just provided. Checking logs If you need to observe the logs, it can be done so by running the commmand make logs Note If you encounter any issues while setup or scan, we advice you to raise an issue in Github and attach the log. While raising any new issues on Github, it is also adviced that you to look for any open issues on Github as well. Stopping the reNgine If you wish to stop the reNgine, it can be done so by using the command make stop Restarting the reNgine reNgine can be restarted using the command make restart Removing all the reNgine Data If you wish to delete all your recon data, it can be done using Danger This is a irreversible process and once pruned, you may never get back your recon data. Use with caution. make prune","title":"For Penetration Testers"},{"location":"pentester/install/#for-penetration-testers","text":"This documentation is intended for Penetration Testers or anybody who will use reNgine for information gathering purpose. This document aims to provide detailed instructions on setting up and running the reNgine . For detailed instruction on \"How to use reNgine\" after setup, it has been provided in Usage Section . This document is divided into 2 parts: It is highly recommended that you follow each steps to avoid encountering any errors/issues during the setup. Prerequisites reNgine Installation","title":"For Penetration Testers"},{"location":"pentester/install/#prerequisites","text":"reNgine uses several scripts and tools, they rely on different other tools to be installed like Go, python, etc and to avoid any dependency issues, we decided to use Docker. Using Docker will not only ease the dependency issues, but will also ease the installation steps. As a penetration tester, you need not focus much on solving the dependencies, installing required tools, etc. With few installation steps, you should be good to run reNgine . reNgine requires these tools to be installed before you begin any installation steps:","title":"Prerequisites"},{"location":"pentester/install/#docker","text":"Docker provides very good documentation on how to install docker based on your Operating System. You can follow the documentation here.","title":"Docker"},{"location":"pentester/install/#docker-installation-on-ubuntulinux-distributions","text":"Warning The installation steps have been directly taken from Docker Guide with no modification. Update the apt package index and install the below packages sudo apt-get update sudo apt-get install \\ apt-transport-https \\ ca-certificates \\ curl \\ gnupg-agent \\ software-properties-common Add Docker official GPG key curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - Use the following commands to setup the stable repository sudo add-apt-repository \\ \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs) \\ stable\" Finally install Docker Engine sudo apt-get update && sudo apt-get install docker-ce docker-ce-cli containerd.io Test the Docker by running docker command on your console/terminal.","title":"Docker installation on Ubuntu/Linux Distributions"},{"location":"pentester/install/#docker-installation-on-windows","text":"Docker requires Docker Desktop to be installed on your Windows OS. Installing Docker Desktop is as easy as double clicking the InstallDocker.msi installer, downloaded from here .","title":"Docker installation on Windows"},{"location":"pentester/install/#docker-installation-on-mac-os","text":"Docker requires Docker Desktop to be installed on your Mac OS. Follow the instruction from Docker hub to install Docker on Mac OS .","title":"Docker installation on Mac OS"},{"location":"pentester/install/#docker-installation-on-windows-wsl","text":"Nick Janetakis has a well written blog and a Video guide on how to install Docker on Windows Subsystem Linux . Please follow the video/blog guide on how to install Docker on WSL.","title":"Docker installation on Windows WSL"},{"location":"pentester/install/#docker-compose","text":"If you're running Docker Desktop you can skip installing docker-compose as docker-compose comes along with Docker Desktop. This applies for both Windows and Mac OS users. If you're using Linux distributions or WSL, you will still need to install docker-compose and the installation steps are similar.","title":"Docker Compose"},{"location":"pentester/install/#installing-docker-compose-on-linux-systems","text":"Download the latest stable version of docker-compose sudo curl -L \"https://github.com/docker/compose/releases/download/1.27.4/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose Apply executable permission sudo chmod +x /usr/local/bin/docker-compose Create a symbolic link sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose Verify your installation by running docker-compose --version Info If curl is not working for some reason, there are alternate installation steps as well. You can use pip or install as a container. Follow the alternate installation steps .","title":"Installing docker-compose on Linux systems"},{"location":"pentester/install/#make","text":"","title":"make"},{"location":"pentester/install/#make-installation-on-linux-distributions","text":"Install the latest version of make using sudo apt install make Although it is optional, build-essential package can also be installed which contains make utility. sudo apt install build-essential","title":"make installation on Linux Distributions"},{"location":"pentester/install/#rengine-installation","text":"Installing reNgine on your favourite VPS or on your local machine is pretty straight forward process. Installation instruction for VPS and local machine is similar and same steps can be followed. If you have met all the above Prerequisites , you can begin installing reNgine . Let's begin by cloning the reNgine . git clone https://github.com/yogeshojha/rengine cd rengine There are currently two different ways of installing reNgine . Using make Manually using docker-compose Using make is by far the easiest way to setup reNgine without encountering any errors. Using docker-compose is a tidious process and is only intended for development purpose. Unless otherwise you're developing reNgine , it is recommended that you use make to install reNgine . Installation steps using docker-compose can be found in Developer's section.","title":"reNgine Installation"},{"location":"pentester/install/#dotenv-file","text":"Before we begin installing reNgine, it is necessary to make changes to the dotenv file. You can edit the file using your favourite editor nano .env or vim .env The sample .env file can be found here . # # General # COMPOSE_PROJECT_NAME=rengine # # SSL specific configuration # AUTHORITY_NAME=reNgine AUTHORITY_PASSWORD=mySecurePassword COMPANY=reNgine DOMAIN_NAME=recon.example.com COUNTRY_CODE=IN STATE=Karnataka CITY=Bangalore","title":"dotenv file"},{"location":"pentester/install/#generating-ssl-certificates","text":"reNgine runs on https unless otherwise used for development purpose. So using https is recommended. To generate the certificates you can use make certs Please note, while running any make command, you must be inside the rengine/ directory.","title":"Generating SSL Certificates"},{"location":"pentester/install/#build-rengine","text":"To build the reNgine, use the following command make build The build process is a lengthy process and may take some time. Thanks to Baptiste MOINE for sending the PR that made build process so much simpler.","title":"Build reNgine"},{"location":"pentester/install/#run-rengine","text":"Once the build process is successful, we're good to run reNgine. This can be done using below command make up reNgine can now be accessed from https://127.0.0.1 or if you're on the VPS https://your_vps_ip_address","title":"Run reNgine"},{"location":"pentester/install/#registering-an-account","text":"The recent upgrade bring authentication feature on reNgine. You will need to create a username and password in order to login to the reNgine. To register reNgine, you will need to run the following command make username You will now be prompted with some personal details(optional), username and password. We highly recommend that you set a strong password for reNgine. You may now login to the reNgine web portal using the username and password that you just provided.","title":"Registering an account"},{"location":"pentester/install/#checking-logs","text":"If you need to observe the logs, it can be done so by running the commmand make logs Note If you encounter any issues while setup or scan, we advice you to raise an issue in Github and attach the log. While raising any new issues on Github, it is also adviced that you to look for any open issues on Github as well.","title":"Checking logs"},{"location":"pentester/install/#stopping-the-rengine","text":"If you wish to stop the reNgine, it can be done so by using the command make stop","title":"Stopping the reNgine"},{"location":"pentester/install/#restarting-the-rengine","text":"reNgine can be restarted using the command make restart","title":"Restarting the reNgine"},{"location":"pentester/install/#removing-all-the-rengine-data","text":"If you wish to delete all your recon data, it can be done using Danger This is a irreversible process and once pruned, you may never get back your recon data. Use with caution. make prune","title":"Removing all the reNgine Data"},{"location":"pentester/scan_engine/","text":"YAML Configuration for Scan Engine Introduction to reNgine YAML Configuration reNgine provides the ability to customize scan engines via YAMl based configuration. This configuration can be used to select the tools, choose the options provided by the tools etc. Currently YAML config is supported for YAML Support for Subdomain Discovery as subdomain_discovery Port Scan as port_scan Visual Identification as visual_identification Directory and File Search as dir_file_search Endpoint Gathering as fetch_url Vulnerability Scan as vulnerability_scan Excluded Subdomains as excluded_subdomains Sample YAML Config subdomain_discovery : uses_tool : [ subfinder , sublist3r , assetfinder , oneforall ] thread : 10 wordlist : default amass_config : config_short_name subfinder_config : config_short_name port_scan : ports : [ top-100 ] exclude_ports : null thread : 10 visual_identification : port : xlarge thread : 2 http_timeout : 3000 screenshot_timeout : 30000 scan_timeout : 100 dir_file_search : extensions : [ php , asp , aspx , txt , conf , db , sql , json ] recursive : false recursive_level : 1 thread : 100 wordlist : default fetch_url : uses_tool : [ gau , hakrawler ] intensity : aggressive vulnerability_scan : concurrent : 10 template : all severity : all excluded_subdomains : - test.rengine.wiki - hello.test.com Info While the above YAML config is just good enough to run the scan against the targets, modifying the configurations can give better results. Before you make any modifications to the YAML Configuration, please note that, wrong configuration may crash the scans. It is adviced that you learn about YAML before you make any modifications. Detailed guide on configuring Scan Engines This document will discuss about the available options, possibilities and different configurations required for reNgine. subdomain_discovery subdomain_discovery currently supports four different options Available option for subdomain_discovery uses_tool (required) thread (optional) wordlist (optional) amass_config (optional) subfinder_config (optional) uses_tool (required) This option allows you to choose the tools required to gather the subdomains. You can use one or more combination of these tools to improve the results. Available options for uses_tool are: all amass-passive amass-active subfinder sublist3r assetfinder oneforall OneForAll Support reNgine now supports OneForAll <3 You can have one or more combination of these tools to improve the results. Supported subdomain_discovery : uses_tool : [ all ] Supported subdomain_discovery : uses_tool : [ amass-active , amass-passive , subfinder ] Unsupported subdomain_discovery : uses_tool : [ amass-active amass-passive subfinder ] # Unsupported because comma is missing Unsupported subdomain_discovery : uses_tool : [ all ] # Unsupported because uses_tool is a property inside subdomain_discovery and must be indented thread (optional) Number of threads to perform the subdomain discovery. By default the value for thread is 10. wordlist (optional) Wordlist for amass-active which performs brute-force of subdomains using a the wordlists. Available Options for wordlist are: default short_name_for_wordlist Please follow the guide on uploading your own wordlist . You need to enter the wordlist short_name here. Default Wordlist If default wordlist is choosed then Deepmagic top 50,000 prefix wordlist will be used. Supported subdomain_discovery : wordlist : default Unsupported subdomain_discovery : wordlist : [ default , short_name ] reNgine currently does not support multiple wordlists. This feature maybe available in future updates. amass_config (optional) Configuration file for your amass. Please follow this guide on how to upload your amass config . Once uploaded, use the short_name with amass_config option. subfinder_config (optional) Configuration file for your subfinder. Please follow this guide on how to upload your subfinder config . Once uploaded, use the short_name with subfinder_config option. port_scan Port scan is currently being performed using naabu , please refer naabu documentation as well. port_scan currently supports three options Supported option for port_scan ports (required) thread (optional) exclude_ports (optional) ports (required) Ports to Scan Available options for ports are top-100 top-1000 full (will scan all 65k ports) custom like [80, 443] Supported port_scan : ports : [ 80 , 443 , 8000 , 8080 ] Supported port_scan : ports : [ top-1000 , 9000 , 1234 ] Supported port_scan : ports : [ full ] thread (optional) Number of threads to perform the port scan. By default the value for thread is 10. exclude_ports (optional) Ports which you would like to exclude from the scan. Supported port_scan : exclude_ports : [ 80 , 443 ] visual_identification Visual Identification is now optional You can now skip the visual identification (Screenshot) by simply removing the visual_identification object! Visual Identification will run aquatone for visual inspection. Please refer aquatone documentation as well. Currently supported options for visual_identification are Supported options for visual_identification port (required) thread (optional) http_timeout (optional) screenshot_timeout(optional) scan_timeout (optional) port Be default, Aquatone will scan targets with commonly used HTTP ports: 80, 443, 8000, 8080 and 8443. You can specify the ports to scan on port option. Supported options are small : 80,443 medium : 80, 443, 8000, 8080, 8443 large : 80, 81, 443, 591, 2082, 2087, 2095, 2096, 3000, 8000, 8001, 8008, 8080, 8083, 8443, 8834, 8888 xlarge : 80, 81, 300, 443, 591, 593, 832, 981, 1010, 1311, 2082, 2087, 2095, 2096, 2480, 3000, 3128, 3333, 4243, 4567, 4711, 4712, 4993, 5000, 5104, 5108, 5800, 6543, 7000, 7396, 7474, 8000, 8001, 8008, 8014, 8042, 8069, 8080, 8081, 8088, 8090, 8091, 8118, 8123, 8172, 8222, 8243, 8280, 8281, 8333, 8443, 8500, 8834, 8880, 8888, 8983, 9000, 9043, 9060, 9080, 9090, 9091, 9200, 9443, 9800, 9981, 12443, 16080, 18091, 18092, 20720, 28017 Supported visual_identification : port : small Supported visual_identification : port : [ 80 , 443 , 1234 ] thread (optional) Number of threads to run aquatone visual identification. By default the value for thread is 10. Supported visual_identification : port : small thread : 100 http_timeout (optional) Timeout in miliseconds for HTTP requests (default 3000) screenshot_timeout(optional) Timeout in miliseconds for screenshots (default 30000) scan_timeout (optional) Timeout in miliseconds for port scans (default 100) dir_file_search This configuration will be used in Directory and file search. Currently supported options for dir_file_search are Supported options for dir_file_search extensions (required) recursive (required) recursive_level (required) thread (optional) wordlist (required) extensions (required) This option will allow you to define the extensions for the file search. You can define as many file extensions as you wish. Also, more file extensions will take longer to complete the scan. Supported dir_file_search : extensions : [ php , git , xml ] Unsupported dir_file_search : extensions : [ .php , .git , .xml ] recursive (required) Enabling recursive option will bruteforce recursively inside all the directories. Turning on the bruteforce option will increase directories scan time exponentially but will gather more information. Default value for recursive is false recursive_level (required) recursive_level is the Max recursion depth into subdirectories. If recursive_level is set to 0, then it is infinity. Meaning it wil perform file search and direcory scan inside all the found subdirectories. Setting up a very high number for recursive_level will also increase the scan time. thread (optional) Number of threads to run directory and file search. By default the value for thread is 100 wordlist (required) This option is used to supply wordlist to dirsearch for files and directory scan. Available Options for wordlist are: default short_name_for_wordlist Please follow the guide on uploading your own wordlist . You need to enter the wordlist short_name here. Default Wordlist If default wordlist is choosed then default dicc.txt will be used. Supported dir_file_search : wordlist : default Unsupported dir_file_search : wordlist : [ default , short_name ] reNgine currently does not support multiple wordlists. This feature maybe available in future updates. fetch_url fetch_url uses tools like gau and hakrawler to gather the endpoints. Currently supported options for fetch_url are: Supported Options for fetch_url uses_tool (required) intensity (required) uses_tool This option allows you to choose the tools required to gather the endpoints. You can use one or more combination of these tools to improve the results. Available options for uses_tool are: gau hakrawler all You can have one or more combination of these tools to improve the results. Supported fetch_url : uses_tool : [ all ] Supported fetch_url : uses_tool : [ gau , hakrawler ] intensity This option will allow you to set the intensity for gathering URLs. Available options are Available options for intensity normal (default): This will only fetch the URLs for main domain. Suppose if your targets is example.com, the URLs associated with example.com are only fetched. normal intensity takes shorter time. aggressive : This will fetch URLs for main domain as well as all the subdomains. This is likely to take very long time and will gather more endpoints compared to normal intensity. vulnerability_scan vulnerability_scan uses nuclei to perform the vulnerability scan. Please refer to nuclei documentation as well. Available options for vulnerability_scan are vulnerability_scan options concurrent (optional) template (required) severity (required) concurrent (optional) This option will specify the number of threads/go routines to perform vulnerability scan. Default value is 10 template (required) Please refer to nuclei's documentation to check which templates are supported. Nuclei may release any new templates which may not be possible to update here in the documentation, so it is adviced that you refer to [Nuclei's documentation]((https://github.com/projectdiscovery/nuclei). Some of the supported options for template are: Supported vulnerability_scan : templates : all We recommend using all options in templates for a detailed scan. Supported vulnerability_scan : templates : [ files , cves ] Supported vulnerability_scan : templates : [ files/git-core.yaml , cves/CVE-2020-1234 ] severity (required) You can run the templates based on the specific severity of the template, single and multiple severity can be used for scan. Available options for severity are Available options for severity all critical high medium low info This will only run the specific templates related to the severity. You can provide multiple options for severity as well. Supported vulnerability_scan : severity : [ all ] Above will run all the templates. Supported vulnerability_scan : severity : [ low , info ] This will only run the templates based on low and informational severity. Recommended Supported vulnerability_scan : severity : [ critical , high , medium , low ] This will exclude informational vulnerabilities from your scan results. excluded_subdomains NEW!!! reNgine recently started supporting out of scope options as well. Use this to keep your subdomains out of scope. Thanks to Valerio Brussani for his pull request. You can supply list of subdomains to keep as out of scope. These subdomains will not be stored in db, nor will be used for any scans. Supported excluded_subdomains : - www.google.com - hello.rengine.wiki Not Supported excluded_subdomains : - * .google.com - * .rengine.wiki Regex Support Currently reNgine has no support for regex and/or wild card support. I will work on it for future releases.","title":"YAML Configuration for Scan Engine"},{"location":"pentester/scan_engine/#yaml-configuration-for-scan-engine","text":"","title":"YAML Configuration for Scan Engine"},{"location":"pentester/scan_engine/#introduction-to-rengine-yaml-configuration","text":"reNgine provides the ability to customize scan engines via YAMl based configuration. This configuration can be used to select the tools, choose the options provided by the tools etc. Currently YAML config is supported for YAML Support for Subdomain Discovery as subdomain_discovery Port Scan as port_scan Visual Identification as visual_identification Directory and File Search as dir_file_search Endpoint Gathering as fetch_url Vulnerability Scan as vulnerability_scan Excluded Subdomains as excluded_subdomains","title":"Introduction to reNgine YAML Configuration"},{"location":"pentester/scan_engine/#sample-yaml-config","text":"subdomain_discovery : uses_tool : [ subfinder , sublist3r , assetfinder , oneforall ] thread : 10 wordlist : default amass_config : config_short_name subfinder_config : config_short_name port_scan : ports : [ top-100 ] exclude_ports : null thread : 10 visual_identification : port : xlarge thread : 2 http_timeout : 3000 screenshot_timeout : 30000 scan_timeout : 100 dir_file_search : extensions : [ php , asp , aspx , txt , conf , db , sql , json ] recursive : false recursive_level : 1 thread : 100 wordlist : default fetch_url : uses_tool : [ gau , hakrawler ] intensity : aggressive vulnerability_scan : concurrent : 10 template : all severity : all excluded_subdomains : - test.rengine.wiki - hello.test.com Info While the above YAML config is just good enough to run the scan against the targets, modifying the configurations can give better results. Before you make any modifications to the YAML Configuration, please note that, wrong configuration may crash the scans. It is adviced that you learn about YAML before you make any modifications.","title":"Sample YAML Config"},{"location":"pentester/scan_engine/#detailed-guide-on-configuring-scan-engines","text":"This document will discuss about the available options, possibilities and different configurations required for reNgine.","title":"Detailed guide on configuring Scan Engines"},{"location":"pentester/scan_engine/#subdomain_discovery","text":"subdomain_discovery currently supports four different options Available option for subdomain_discovery uses_tool (required) thread (optional) wordlist (optional) amass_config (optional) subfinder_config (optional) uses_tool (required) This option allows you to choose the tools required to gather the subdomains. You can use one or more combination of these tools to improve the results. Available options for uses_tool are: all amass-passive amass-active subfinder sublist3r assetfinder oneforall OneForAll Support reNgine now supports OneForAll <3 You can have one or more combination of these tools to improve the results. Supported subdomain_discovery : uses_tool : [ all ] Supported subdomain_discovery : uses_tool : [ amass-active , amass-passive , subfinder ] Unsupported subdomain_discovery : uses_tool : [ amass-active amass-passive subfinder ] # Unsupported because comma is missing Unsupported subdomain_discovery : uses_tool : [ all ] # Unsupported because uses_tool is a property inside subdomain_discovery and must be indented thread (optional) Number of threads to perform the subdomain discovery. By default the value for thread is 10. wordlist (optional) Wordlist for amass-active which performs brute-force of subdomains using a the wordlists. Available Options for wordlist are: default short_name_for_wordlist Please follow the guide on uploading your own wordlist . You need to enter the wordlist short_name here. Default Wordlist If default wordlist is choosed then Deepmagic top 50,000 prefix wordlist will be used. Supported subdomain_discovery : wordlist : default Unsupported subdomain_discovery : wordlist : [ default , short_name ] reNgine currently does not support multiple wordlists. This feature maybe available in future updates. amass_config (optional) Configuration file for your amass. Please follow this guide on how to upload your amass config . Once uploaded, use the short_name with amass_config option. subfinder_config (optional) Configuration file for your subfinder. Please follow this guide on how to upload your subfinder config . Once uploaded, use the short_name with subfinder_config option.","title":"subdomain_discovery"},{"location":"pentester/scan_engine/#port_scan","text":"Port scan is currently being performed using naabu , please refer naabu documentation as well. port_scan currently supports three options Supported option for port_scan ports (required) thread (optional) exclude_ports (optional) ports (required) Ports to Scan Available options for ports are top-100 top-1000 full (will scan all 65k ports) custom like [80, 443] Supported port_scan : ports : [ 80 , 443 , 8000 , 8080 ] Supported port_scan : ports : [ top-1000 , 9000 , 1234 ] Supported port_scan : ports : [ full ] thread (optional) Number of threads to perform the port scan. By default the value for thread is 10. exclude_ports (optional) Ports which you would like to exclude from the scan. Supported port_scan : exclude_ports : [ 80 , 443 ]","title":"port_scan"},{"location":"pentester/scan_engine/#visual_identification","text":"Visual Identification is now optional You can now skip the visual identification (Screenshot) by simply removing the visual_identification object! Visual Identification will run aquatone for visual inspection. Please refer aquatone documentation as well. Currently supported options for visual_identification are Supported options for visual_identification port (required) thread (optional) http_timeout (optional) screenshot_timeout(optional) scan_timeout (optional) port Be default, Aquatone will scan targets with commonly used HTTP ports: 80, 443, 8000, 8080 and 8443. You can specify the ports to scan on port option. Supported options are small : 80,443 medium : 80, 443, 8000, 8080, 8443 large : 80, 81, 443, 591, 2082, 2087, 2095, 2096, 3000, 8000, 8001, 8008, 8080, 8083, 8443, 8834, 8888 xlarge : 80, 81, 300, 443, 591, 593, 832, 981, 1010, 1311, 2082, 2087, 2095, 2096, 2480, 3000, 3128, 3333, 4243, 4567, 4711, 4712, 4993, 5000, 5104, 5108, 5800, 6543, 7000, 7396, 7474, 8000, 8001, 8008, 8014, 8042, 8069, 8080, 8081, 8088, 8090, 8091, 8118, 8123, 8172, 8222, 8243, 8280, 8281, 8333, 8443, 8500, 8834, 8880, 8888, 8983, 9000, 9043, 9060, 9080, 9090, 9091, 9200, 9443, 9800, 9981, 12443, 16080, 18091, 18092, 20720, 28017 Supported visual_identification : port : small Supported visual_identification : port : [ 80 , 443 , 1234 ] thread (optional) Number of threads to run aquatone visual identification. By default the value for thread is 10. Supported visual_identification : port : small thread : 100 http_timeout (optional) Timeout in miliseconds for HTTP requests (default 3000) screenshot_timeout(optional) Timeout in miliseconds for screenshots (default 30000) scan_timeout (optional) Timeout in miliseconds for port scans (default 100)","title":"visual_identification"},{"location":"pentester/scan_engine/#dir_file_search","text":"This configuration will be used in Directory and file search. Currently supported options for dir_file_search are Supported options for dir_file_search extensions (required) recursive (required) recursive_level (required) thread (optional) wordlist (required) extensions (required) This option will allow you to define the extensions for the file search. You can define as many file extensions as you wish. Also, more file extensions will take longer to complete the scan. Supported dir_file_search : extensions : [ php , git , xml ] Unsupported dir_file_search : extensions : [ .php , .git , .xml ] recursive (required) Enabling recursive option will bruteforce recursively inside all the directories. Turning on the bruteforce option will increase directories scan time exponentially but will gather more information. Default value for recursive is false recursive_level (required) recursive_level is the Max recursion depth into subdirectories. If recursive_level is set to 0, then it is infinity. Meaning it wil perform file search and direcory scan inside all the found subdirectories. Setting up a very high number for recursive_level will also increase the scan time. thread (optional) Number of threads to run directory and file search. By default the value for thread is 100 wordlist (required) This option is used to supply wordlist to dirsearch for files and directory scan. Available Options for wordlist are: default short_name_for_wordlist Please follow the guide on uploading your own wordlist . You need to enter the wordlist short_name here. Default Wordlist If default wordlist is choosed then default dicc.txt will be used. Supported dir_file_search : wordlist : default Unsupported dir_file_search : wordlist : [ default , short_name ] reNgine currently does not support multiple wordlists. This feature maybe available in future updates.","title":"dir_file_search"},{"location":"pentester/scan_engine/#fetch_url","text":"fetch_url uses tools like gau and hakrawler to gather the endpoints. Currently supported options for fetch_url are: Supported Options for fetch_url uses_tool (required) intensity (required) uses_tool This option allows you to choose the tools required to gather the endpoints. You can use one or more combination of these tools to improve the results. Available options for uses_tool are: gau hakrawler all You can have one or more combination of these tools to improve the results. Supported fetch_url : uses_tool : [ all ] Supported fetch_url : uses_tool : [ gau , hakrawler ] intensity This option will allow you to set the intensity for gathering URLs. Available options are Available options for intensity normal (default): This will only fetch the URLs for main domain. Suppose if your targets is example.com, the URLs associated with example.com are only fetched. normal intensity takes shorter time. aggressive : This will fetch URLs for main domain as well as all the subdomains. This is likely to take very long time and will gather more endpoints compared to normal intensity.","title":"fetch_url"},{"location":"pentester/scan_engine/#vulnerability_scan","text":"vulnerability_scan uses nuclei to perform the vulnerability scan. Please refer to nuclei documentation as well. Available options for vulnerability_scan are vulnerability_scan options concurrent (optional) template (required) severity (required) concurrent (optional) This option will specify the number of threads/go routines to perform vulnerability scan. Default value is 10 template (required) Please refer to nuclei's documentation to check which templates are supported. Nuclei may release any new templates which may not be possible to update here in the documentation, so it is adviced that you refer to [Nuclei's documentation]((https://github.com/projectdiscovery/nuclei). Some of the supported options for template are: Supported vulnerability_scan : templates : all We recommend using all options in templates for a detailed scan. Supported vulnerability_scan : templates : [ files , cves ] Supported vulnerability_scan : templates : [ files/git-core.yaml , cves/CVE-2020-1234 ] severity (required) You can run the templates based on the specific severity of the template, single and multiple severity can be used for scan. Available options for severity are Available options for severity all critical high medium low info This will only run the specific templates related to the severity. You can provide multiple options for severity as well. Supported vulnerability_scan : severity : [ all ] Above will run all the templates. Supported vulnerability_scan : severity : [ low , info ] This will only run the templates based on low and informational severity. Recommended Supported vulnerability_scan : severity : [ critical , high , medium , low ] This will exclude informational vulnerabilities from your scan results.","title":"vulnerability_scan"},{"location":"pentester/scan_engine/#excluded_subdomains","text":"NEW!!! reNgine recently started supporting out of scope options as well. Use this to keep your subdomains out of scope. Thanks to Valerio Brussani for his pull request. You can supply list of subdomains to keep as out of scope. These subdomains will not be stored in db, nor will be used for any scans. Supported excluded_subdomains : - www.google.com - hello.rengine.wiki Not Supported excluded_subdomains : - * .google.com - * .rengine.wiki Regex Support Currently reNgine has no support for regex and/or wild card support. I will work on it for future releases.","title":"excluded_subdomains"},{"location":"pentester/search/","text":"Performing advanced search on recon data I often get asked, how to filter the recon data, how to filter on specific columns. After the reNgine v0.5 update, this feature is available for subdomain data, vulnerability scan data and endpoints results. However, I am working on to make this available for global search as well, you might have to wait for sometime. To perform any queries, you will need to know What operations are supported? What fields are supported? 1. What operations are supported? reNgine currently supports Supported Query Operations = Equals, field_lookup=value this will work like contains in Python, not the exact lookup! < Less Than field_lookup<value will return results lesser than the value from the lookup field, not all fields support < , field with integer values are supported, like http_status, content_length etc. > (GT) field_lookup>value will return results greater than the value from the lookup field, not all fields support > , field with integer values are supported, like http_status, content_length etc. ! (NOT) field_lookup!value used to exclude the values. & (AND) field_lookup&value used to perform intersection two of more results obtained from the operation of < , > , = or '!', performs AND operation on results. | (OR) field_lookup|value used to perform union two of more results obtained from the operation of < , > , = or '!', performs OR operation on results. Examples http_status=200&subdomain=tequila You can combine these operators to perform an advanced query lookup. But... Not Supported reNgine currently does not support & and |, both operators at the same time. You can either use combinations of & or combinations of | For example http_status=200&http_status=500&page_title=Google is supported. But... http_status=200&http_status=500|page_title=Google is not supported Please perform only either and operations or or operations at a time, until next release. 2. What fields are supported? Supported fields in Subdomain Discovery Results Field Lookup Description Supported Operations subdomain Subdomain Name =, ! cname CNAME Records =, ! ports Open Ports =, ! ip_address IP Address =, ! tech Technology Used =, ! http_status HTTP status =, !, <, > content_length Content Length =, !, <, > status Status of Subdomain, can be open or closed =, ! Possible options for status The only possible options for status are, open or closed. Supported fields in Vulnerability Results Field Lookup Description Supported Operations severity Severity of Vulnerability =, ! title Title of Vulnerability =, ! vulnerable_url or url Vulnerable URL =, ! description Description of vulnerability =, ! status Status of Subdomain, can be open or closed =, ! Supported fields in Endpoint Discovery Results Field Lookup Description Supported Operations url or http_url Endpoint URL =, ! http_status HTTP status =, !, <, > content_length Content Length =, !, <, > content_type Content Type =, ! Examples of valid advanced lookup","title":"Performing advanced search on recon data"},{"location":"pentester/search/#performing-advanced-search-on-recon-data","text":"I often get asked, how to filter the recon data, how to filter on specific columns. After the reNgine v0.5 update, this feature is available for subdomain data, vulnerability scan data and endpoints results. However, I am working on to make this available for global search as well, you might have to wait for sometime. To perform any queries, you will need to know What operations are supported? What fields are supported?","title":"Performing advanced search on recon data"},{"location":"pentester/search/#1-what-operations-are-supported","text":"reNgine currently supports Supported Query Operations = Equals, field_lookup=value this will work like contains in Python, not the exact lookup! < Less Than field_lookup<value will return results lesser than the value from the lookup field, not all fields support < , field with integer values are supported, like http_status, content_length etc. > (GT) field_lookup>value will return results greater than the value from the lookup field, not all fields support > , field with integer values are supported, like http_status, content_length etc. ! (NOT) field_lookup!value used to exclude the values. & (AND) field_lookup&value used to perform intersection two of more results obtained from the operation of < , > , = or '!', performs AND operation on results. | (OR) field_lookup|value used to perform union two of more results obtained from the operation of < , > , = or '!', performs OR operation on results.","title":"1. What operations are supported?"},{"location":"pentester/search/#examples","text":"http_status=200&subdomain=tequila You can combine these operators to perform an advanced query lookup. But... Not Supported reNgine currently does not support & and |, both operators at the same time. You can either use combinations of & or combinations of | For example http_status=200&http_status=500&page_title=Google is supported. But... http_status=200&http_status=500|page_title=Google is not supported Please perform only either and operations or or operations at a time, until next release.","title":"Examples"},{"location":"pentester/search/#2-what-fields-are-supported","text":"","title":"2. What fields are supported?"},{"location":"pentester/search/#supported-fields-in-subdomain-discovery-results","text":"Field Lookup Description Supported Operations subdomain Subdomain Name =, ! cname CNAME Records =, ! ports Open Ports =, ! ip_address IP Address =, ! tech Technology Used =, ! http_status HTTP status =, !, <, > content_length Content Length =, !, <, > status Status of Subdomain, can be open or closed =, ! Possible options for status The only possible options for status are, open or closed.","title":"Supported fields in Subdomain Discovery Results"},{"location":"pentester/search/#supported-fields-in-vulnerability-results","text":"Field Lookup Description Supported Operations severity Severity of Vulnerability =, ! title Title of Vulnerability =, ! vulnerable_url or url Vulnerable URL =, ! description Description of vulnerability =, ! status Status of Subdomain, can be open or closed =, !","title":"Supported fields in Vulnerability Results"},{"location":"pentester/search/#supported-fields-in-endpoint-discovery-results","text":"Field Lookup Description Supported Operations url or http_url Endpoint URL =, ! http_status HTTP status =, !, <, > content_length Content Length =, !, <, > content_type Content Type =, !","title":"Supported fields in Endpoint Discovery Results"},{"location":"pentester/search/#examples-of-valid-advanced-lookup","text":"","title":"Examples of valid advanced lookup"},{"location":"pentester/update/","text":"Updating reNgine To update the reNgine to the latest version use the following commands: Stop if reNgine is running make stop Get the latest changes, make sure you're in master branch. git pull This should pull any latest changes in reNgine from a master(stable) branch. Since you already have certs built, you can skip building certs. The next step would be to build reNgine once again. make build If no error appears, you're good to go. make up happy reconnaissance :-)","title":"Updating reNgine"},{"location":"pentester/update/#updating-rengine","text":"To update the reNgine to the latest version use the following commands: Stop if reNgine is running make stop Get the latest changes, make sure you're in master branch. git pull This should pull any latest changes in reNgine from a master(stable) branch. Since you already have certs built, you can skip building certs. The next step would be to build reNgine once again. make build If no error appears, you're good to go. make up happy reconnaissance :-)","title":"Updating reNgine"},{"location":"pentester/usage/","text":"Using reNgine About this document This document will provide the detailed instructions on how to use reNgine. If you are looking for installation instructions and want to ensure if you have met the prerequisites, we suggest you to look at the installation instructions and prerequisites sections. Targets Target could be a domain or a subdomain, that you can run the scan against. Having a target is a must and a basic requirement to run any scan. Support for IP address as a target is coming soon. Adding Targets To add the Target , navigate to the left sidebar menu and click on Add Target submenu. Using this option, you can add one target at a time, for importing multiple targets, follow the Importing Targets guide. Importing Targets reNgine provides the ability to import multiple targets. To import multiple targets, click on the Import Targets options from Targets menu. File extension support reNgine currently supports importing targets only from .txt and .csv files. Importing Targets from txt file Please note that the txt file must only contain domain names or subdomain names. Any other format will be rejected by rengine. Supported txt Format hackerone.com docs.hackerone.com nepal.gov.np UnSupported txt Format https://hackerone.com https://docs.hackerone.com nepal.gov.np/docs Importing Targets from csv file reNgine also provides an option to import targets from a csv file. The csv file contents must be in the form of domain/subdomain_name,Description Having description is optional in csv format. Supported CSV Format hackerone.com docs.hackerone.com, Hackerone Docs nepal.gov.np, Nepal Government Bug Bounty UnSupported CSV Format https://hackerone.com, Hackerone, Target https://docs.hackerone.com Configurations Tools like amass and subfinder uses configuration files to unleash the power of these tools. These configuration files often contains API keys, and other configurations used to gather more accurate results. reNgine provides the ability to upload your configuration files for various tools and use them in the scan engines. Adding new Configurations To add the Configurations , select the Configurations menu from left sidebar and click on Add new Configuration . Fields Configuration Name : The configuration name for you to identify. Short Name : The short name is automatically generated, though you have an option to change it. The short name is an identifier to the config file, that will be used to reference in the Scan Engine YAML Configuration . Actual Configuration : Paste your actual configuration. TIP: Sample Configurations If you have difficulty setting up the config file, you can find the sample config files below. Subfinder Configuration Amass Configuration Using the config file in Scan Engine will be discussed in the Setting up Scan Engine section. Wordlist Tools like dirsearch or amass uses wordlist to bruteforce the directories or subdomains. reNgine provides the ability to upload your own wordlists. Adding new Wordlist To upload your Wordlists , selection the Wordlists menu from left sidebar and click on Add new Wordlist . Fields Wordlist Name : The Wordlist name for you to identify. Short Name : The short name is automatically generated, though you have an option to change it. The short name is an identifier to the config file, that will be used to reference in the Scan Engine YAML Configuration . Upload your wordlist in txt file format. Using the wordlist in Scan Engine will be discussed in the Setting up Scan Engine section. Common Wordlists Some of the common wordlists for your scans. * Seclists * Jason Haddix DNS Enumeration wordlist * Jason Haddix Content Discovery wordlist Default Wordlist reNgine also has default wordlist called deepmagic top 5000 prefix, which can be referenced in scan engines using wordlist: default Scan Engines One of the core components of reNgine is Scan Engine. Scan Engines lets you define the type of scan you wish to perform along with the ability to choose the tools, and dive deep into the configurations using the YAML configuration. You can define as many scan engines as you want, with the type of configurations you wish. Scan Engines are capable of performing: reNgine Scan Engine capabilities Subdomain Discovery : Discovers all the subdomains using tools like sublist3r, subfinder, amass, assetfinder, etc. Port Scan : Use to identify the open ports on the subdomains that have been discovered. Currently reNgine uses naabu to check for open ports. We have plans to use masscan in the future. Directory and File Search : Uses dirsearch to discover the directories and files. Fetch all Endpoints : Fetches all the urls for each subdomains from various sources like Open Threat Exchange, Wayback machine, common crawl etc. reNgine uses gau , hakrawler to fetch the endpoints. Vulnerability Scan (Beta) : reNgine uses nuclei to perform the Vulnerability Scans on the targets. Default Engines in reNgine Default Scan Engines reNgine comes with 3 preinstalled Scan Engines, namely Full Scan , Passive Scan and Subdomain only scan Full Scan This scan engine will perform all the capabilities of reNgine, namely Subdomain Discovery, Port Scan, Directory and File search, Fetch all endpoints, Vulnerability Scan. Running a Full Scan will take more time compared to other scans. Passive Scan This scan engine will perform only the passive scan , namely Subdomain Discovery, and will Fetch all endpoints. Active scanning like Port Scan, Directory and File Search is disabled. Also, no vulnerability scan will be performed. Subdomain only scan This scan engine will perform only the Subdomain Scan, all other capabilities are disabled. Defining new Scan Engines To define a new Scan Engine in reNgine, click on Scan Engine menu from left sidebar and the click on Add New Engine button. Add new Scan Engine Fields Engine Name : Name of the Engine Choose the type of scan you want this engine to perform. YAML Configuration : YAML configuration for the scan engine. YAML configuration will help you choose the tools required to gather information and also focus on other configurations like defining number of threads, configurations, wordlists, etc. YAML Setting for Scan Engine will be explained separately on Guide to defining YAML configuration for scan engines section. Notification reNgine currently supports Slack Hooks for sending notification to update you about the scan status. If notifications are enabled, this will send you notification for any found vulnerabilities, and scan status. Currently the notification service works only with slack. In future, we might bring support for collaboration tools like Microsoft Teams, Telegram and others, as of now we do not have any immediate plans to integrate with other collaboration platform. If you want to learn more on how to get the slack web hook URL, please follow this guide . Adding Notification Hook You can add the notification hook from Notification menu, and click on Add new Hook . Follow the instructions from Slack Web Hook Documentation and get the web hook for your slack channel. Enter the web hook URL in Hook URL field and give a name to your slack channel. Click on submit menu. You will now receive notifications on slack channel for any scan update and if any vulnerability has been found. Disabling/Enabling Notifications You can disable the notifications, if you no longer need them. This can be done after clicking on Notification menu from left side bar and enable/disable the notification from Send Notification column. Initiating Scan Initiating the scan in reNgine is pretty simple and straight forward process. If you've already defined the Targets and Scan Engines : Click on List Targets sub menu under Targets menu. You will see all the targets that you've added or imported. To initiate the quick scan click on the Quick Scan option from Actions column. Click on the Quick Scan icon. Choose the Scan Engine Then click on Start Scan button. To view the results, you can navigate to Scan History menu. Scan Status reNgine has 4 different scan status. Scan Status Scanning : The target is being currently scanned. Pending : The target is currently on pending mode. reNgine can scan 4 targets in parallel, when there are more than 4 targets being scanned at a time, the 5th target goes into pending mode. Once the scan is completed, the 5th scan automatically goes into Scanning mode. Aborted : The scan has been force stopped by the user. Failed : The scan has been failed. Please Check the Logs as to why the scan has failed. Scheduling Scan With the recent upgrade, reNgine can schedule the scan in the future as well, also scan be periodically scheduled as well. The two types of scans have been described below. If you've already defined the Targets and Scan Engines , you can easily schedule the scan: Click on List Targets sub menu under Targets menu. You will see all the targets that you've added or imported. To initiate the quick scan click on the Schedule Scan option from Actions column. Click on the Schedule Scan icon. Choose the Scheduler type and engine as well. (Scheduler types has been described in detail below.) Then click on Schedule Scan button. To view the results, you can navigate to Scan History menu. Types of Scheduler There are currently two types of schedulers in reNgine Periodic Scan Clocked Scan Periodic Scan reNgine provides the ability to periodically schedule the scan like, \"I want to scan example.com every 10 minutes\" or \"I want to schedule the scan every 10 days\". Periodic scan will allow you to schedule the scan every X Minutes Hours Days Weeks Months Clocked Scan Clocked scan are different than Periodic Scan. In clocked scan, you can schedule the scan at a specific time. Like, \"I want to schedule the scan at 3 pm August 2021.\" In clocked scan, running the clocked scan repeatedly is not currently supported. This will be released in the future. For now, Clocked Scan are one time task. Vulnerability Scan (Beta) v0.4 and above, reNgine supports Nuclei for vulnerability scan. While defining Scan Engines , select Vulnerability Scanner. Other Nuclei related configuration will be discussed in defining the YAML configutation for Scan Engines section. There's a lot to improve for Vulnerability Scan in reNgine. Currently there is no way to supply the custom nuclei templates. We will bring this feature in the upcoming releases. Nuclei Templates Update reNgine automatically updates the Nuclei templates.","title":"Using reNgine"},{"location":"pentester/usage/#using-rengine","text":"About this document This document will provide the detailed instructions on how to use reNgine. If you are looking for installation instructions and want to ensure if you have met the prerequisites, we suggest you to look at the installation instructions and prerequisites sections.","title":"Using reNgine"},{"location":"pentester/usage/#targets","text":"Target could be a domain or a subdomain, that you can run the scan against. Having a target is a must and a basic requirement to run any scan. Support for IP address as a target is coming soon.","title":"Targets"},{"location":"pentester/usage/#adding-targets","text":"To add the Target , navigate to the left sidebar menu and click on Add Target submenu. Using this option, you can add one target at a time, for importing multiple targets, follow the Importing Targets guide.","title":"Adding Targets"},{"location":"pentester/usage/#importing-targets","text":"reNgine provides the ability to import multiple targets. To import multiple targets, click on the Import Targets options from Targets menu. File extension support reNgine currently supports importing targets only from .txt and .csv files.","title":"Importing Targets"},{"location":"pentester/usage/#importing-targets-from-txt-file","text":"Please note that the txt file must only contain domain names or subdomain names. Any other format will be rejected by rengine. Supported txt Format hackerone.com docs.hackerone.com nepal.gov.np UnSupported txt Format https://hackerone.com https://docs.hackerone.com nepal.gov.np/docs","title":"Importing Targets from txt file"},{"location":"pentester/usage/#importing-targets-from-csv-file","text":"reNgine also provides an option to import targets from a csv file. The csv file contents must be in the form of domain/subdomain_name,Description Having description is optional in csv format. Supported CSV Format hackerone.com docs.hackerone.com, Hackerone Docs nepal.gov.np, Nepal Government Bug Bounty UnSupported CSV Format https://hackerone.com, Hackerone, Target https://docs.hackerone.com","title":"Importing Targets from csv file"},{"location":"pentester/usage/#configurations","text":"Tools like amass and subfinder uses configuration files to unleash the power of these tools. These configuration files often contains API keys, and other configurations used to gather more accurate results. reNgine provides the ability to upload your configuration files for various tools and use them in the scan engines.","title":"Configurations"},{"location":"pentester/usage/#adding-new-configurations","text":"To add the Configurations , select the Configurations menu from left sidebar and click on Add new Configuration . Fields Configuration Name : The configuration name for you to identify. Short Name : The short name is automatically generated, though you have an option to change it. The short name is an identifier to the config file, that will be used to reference in the Scan Engine YAML Configuration . Actual Configuration : Paste your actual configuration. TIP: Sample Configurations If you have difficulty setting up the config file, you can find the sample config files below. Subfinder Configuration Amass Configuration Using the config file in Scan Engine will be discussed in the Setting up Scan Engine section.","title":"Adding new Configurations"},{"location":"pentester/usage/#wordlist","text":"Tools like dirsearch or amass uses wordlist to bruteforce the directories or subdomains. reNgine provides the ability to upload your own wordlists.","title":"Wordlist"},{"location":"pentester/usage/#adding-new-wordlist","text":"To upload your Wordlists , selection the Wordlists menu from left sidebar and click on Add new Wordlist . Fields Wordlist Name : The Wordlist name for you to identify. Short Name : The short name is automatically generated, though you have an option to change it. The short name is an identifier to the config file, that will be used to reference in the Scan Engine YAML Configuration . Upload your wordlist in txt file format. Using the wordlist in Scan Engine will be discussed in the Setting up Scan Engine section. Common Wordlists Some of the common wordlists for your scans. * Seclists * Jason Haddix DNS Enumeration wordlist * Jason Haddix Content Discovery wordlist Default Wordlist reNgine also has default wordlist called deepmagic top 5000 prefix, which can be referenced in scan engines using wordlist: default","title":"Adding new Wordlist"},{"location":"pentester/usage/#scan-engines","text":"One of the core components of reNgine is Scan Engine. Scan Engines lets you define the type of scan you wish to perform along with the ability to choose the tools, and dive deep into the configurations using the YAML configuration. You can define as many scan engines as you want, with the type of configurations you wish. Scan Engines are capable of performing: reNgine Scan Engine capabilities Subdomain Discovery : Discovers all the subdomains using tools like sublist3r, subfinder, amass, assetfinder, etc. Port Scan : Use to identify the open ports on the subdomains that have been discovered. Currently reNgine uses naabu to check for open ports. We have plans to use masscan in the future. Directory and File Search : Uses dirsearch to discover the directories and files. Fetch all Endpoints : Fetches all the urls for each subdomains from various sources like Open Threat Exchange, Wayback machine, common crawl etc. reNgine uses gau , hakrawler to fetch the endpoints. Vulnerability Scan (Beta) : reNgine uses nuclei to perform the Vulnerability Scans on the targets.","title":"Scan Engines"},{"location":"pentester/usage/#default-engines-in-rengine","text":"Default Scan Engines reNgine comes with 3 preinstalled Scan Engines, namely Full Scan , Passive Scan and Subdomain only scan Full Scan This scan engine will perform all the capabilities of reNgine, namely Subdomain Discovery, Port Scan, Directory and File search, Fetch all endpoints, Vulnerability Scan. Running a Full Scan will take more time compared to other scans. Passive Scan This scan engine will perform only the passive scan , namely Subdomain Discovery, and will Fetch all endpoints. Active scanning like Port Scan, Directory and File Search is disabled. Also, no vulnerability scan will be performed. Subdomain only scan This scan engine will perform only the Subdomain Scan, all other capabilities are disabled.","title":"Default Engines in reNgine"},{"location":"pentester/usage/#defining-new-scan-engines","text":"To define a new Scan Engine in reNgine, click on Scan Engine menu from left sidebar and the click on Add New Engine button. Add new Scan Engine Fields Engine Name : Name of the Engine Choose the type of scan you want this engine to perform. YAML Configuration : YAML configuration for the scan engine. YAML configuration will help you choose the tools required to gather information and also focus on other configurations like defining number of threads, configurations, wordlists, etc. YAML Setting for Scan Engine will be explained separately on Guide to defining YAML configuration for scan engines section.","title":"Defining new Scan Engines"},{"location":"pentester/usage/#notification","text":"reNgine currently supports Slack Hooks for sending notification to update you about the scan status. If notifications are enabled, this will send you notification for any found vulnerabilities, and scan status. Currently the notification service works only with slack. In future, we might bring support for collaboration tools like Microsoft Teams, Telegram and others, as of now we do not have any immediate plans to integrate with other collaboration platform. If you want to learn more on how to get the slack web hook URL, please follow this guide .","title":"Notification"},{"location":"pentester/usage/#adding-notification-hook","text":"You can add the notification hook from Notification menu, and click on Add new Hook . Follow the instructions from Slack Web Hook Documentation and get the web hook for your slack channel. Enter the web hook URL in Hook URL field and give a name to your slack channel. Click on submit menu. You will now receive notifications on slack channel for any scan update and if any vulnerability has been found.","title":"Adding Notification Hook"},{"location":"pentester/usage/#disablingenabling-notifications","text":"You can disable the notifications, if you no longer need them. This can be done after clicking on Notification menu from left side bar and enable/disable the notification from Send Notification column.","title":"Disabling/Enabling Notifications"},{"location":"pentester/usage/#initiating-scan","text":"Initiating the scan in reNgine is pretty simple and straight forward process. If you've already defined the Targets and Scan Engines : Click on List Targets sub menu under Targets menu. You will see all the targets that you've added or imported. To initiate the quick scan click on the Quick Scan option from Actions column. Click on the Quick Scan icon. Choose the Scan Engine Then click on Start Scan button. To view the results, you can navigate to Scan History menu.","title":"Initiating Scan"},{"location":"pentester/usage/#scan-status","text":"reNgine has 4 different scan status. Scan Status Scanning : The target is being currently scanned. Pending : The target is currently on pending mode. reNgine can scan 4 targets in parallel, when there are more than 4 targets being scanned at a time, the 5th target goes into pending mode. Once the scan is completed, the 5th scan automatically goes into Scanning mode. Aborted : The scan has been force stopped by the user. Failed : The scan has been failed. Please Check the Logs as to why the scan has failed.","title":"Scan Status"},{"location":"pentester/usage/#scheduling-scan","text":"With the recent upgrade, reNgine can schedule the scan in the future as well, also scan be periodically scheduled as well. The two types of scans have been described below. If you've already defined the Targets and Scan Engines , you can easily schedule the scan: Click on List Targets sub menu under Targets menu. You will see all the targets that you've added or imported. To initiate the quick scan click on the Schedule Scan option from Actions column. Click on the Schedule Scan icon. Choose the Scheduler type and engine as well. (Scheduler types has been described in detail below.) Then click on Schedule Scan button. To view the results, you can navigate to Scan History menu.","title":"Scheduling Scan"},{"location":"pentester/usage/#types-of-scheduler","text":"There are currently two types of schedulers in reNgine Periodic Scan Clocked Scan","title":"Types of Scheduler"},{"location":"pentester/usage/#periodic-scan","text":"reNgine provides the ability to periodically schedule the scan like, \"I want to scan example.com every 10 minutes\" or \"I want to schedule the scan every 10 days\". Periodic scan will allow you to schedule the scan every X Minutes Hours Days Weeks Months","title":"Periodic Scan"},{"location":"pentester/usage/#clocked-scan","text":"Clocked scan are different than Periodic Scan. In clocked scan, you can schedule the scan at a specific time. Like, \"I want to schedule the scan at 3 pm August 2021.\" In clocked scan, running the clocked scan repeatedly is not currently supported. This will be released in the future. For now, Clocked Scan are one time task.","title":"Clocked Scan"},{"location":"pentester/usage/#vulnerability-scan-beta","text":"v0.4 and above, reNgine supports Nuclei for vulnerability scan. While defining Scan Engines , select Vulnerability Scanner. Other Nuclei related configuration will be discussed in defining the YAML configutation for Scan Engines section. There's a lot to improve for Vulnerability Scan in reNgine. Currently there is no way to supply the custom nuclei templates. We will bring this feature in the upcoming releases. Nuclei Templates Update reNgine automatically updates the Nuclei templates.","title":"Vulnerability Scan (Beta)"}]}